-- Clean slate - drop everything first
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

-- Base tables
CREATE TABLE profiles (
  id TEXT PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

CREATE TABLE dogs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  breed TEXT,
  age_years INTEGER,
  weight_lbs INTEGER,
  photo_url TEXT,
  owner_id TEXT NOT NULL REFERENCES profiles(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

CREATE TABLE training_plans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  dog_id BIGINT REFERENCES dogs(id) ON DELETE CASCADE,
  user_id TEXT REFERENCES profiles(id),
  title TEXT NOT NULL,
  description TEXT,
  behavior_to_correct TEXT,
  difficulty TEXT NOT NULL,
  duration_weeks INTEGER NOT NULL,
  status TEXT NOT NULL DEFAULT 'not_started',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

CREATE TABLE training_steps (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  plan_id BIGINT REFERENCES training_plans(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  day_number INTEGER NOT NULL,
  duration_minutes INTEGER,
  video_url TEXT,
  completed BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

CREATE TABLE training_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  step_id BIGINT REFERENCES training_steps(id) ON DELETE CASCADE,
  dog_id BIGINT REFERENCES dogs(id) ON DELETE CASCADE,
  completed_at TIMESTAMP WITH TIME ZONE NOT NULL,
  achievements TEXT,
  challenges TEXT,
  duration_minutes INTEGER,
  repetitions INTEGER,
  environment_notes TEXT,
  environments TEXT[],
  dog_mood TEXT,
  rating INTEGER,
  treats_used TEXT,
  trainer_mood TEXT,
  next_steps TEXT,
  notes TEXT
);

CREATE TABLE chat_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id TEXT REFERENCES profiles(id),
  role TEXT NOT NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- RLS Policies
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE dogs ENABLE ROW LEVEL SECURITY;
ALTER TABLE training_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE training_steps ENABLE ROW LEVEL SECURITY;
ALTER TABLE training_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE chat_history ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view own profile"
  ON profiles FOR SELECT
  USING (auth.uid()::text = id);

CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  USING (auth.uid()::text = id);

CREATE POLICY "Service role can manage profiles"
  ON profiles FOR ALL
  USING (auth.jwt()->>'role' = 'service_role');

CREATE POLICY "Allow profile creation"
  ON profiles FOR INSERT
  WITH CHECK (true);

-- Dogs policies
CREATE POLICY "Users can view own dogs"
  ON dogs FOR SELECT
USING (owner_id = auth.uid()::text);

CREATE POLICY "Users can create dogs"
  ON dogs FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update own dogs"
  ON dogs FOR UPDATE
 USING (owner_id = auth.uid()::text);

CREATE POLICY "Users can delete own dogs"
  ON dogs FOR DELETE
USING (owner_id = auth.uid()::text);

-- Training plans policies
CREATE POLICY "Users can view own training plans"
  ON training_plans FOR SELECT
  USING (user_id = auth.uid()::text);

CREATE POLICY "Users can create training plans"
  ON training_plans FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update own training plans"
  ON training_plans FOR UPDATE
  USING (user_id = auth.uid()::text);

CREATE POLICY "Users can delete own training plans"
  ON training_plans FOR DELETE
  USING (user_id = auth.uid()::text);

-- Training steps policies
CREATE POLICY "Users can view their training steps"
  ON training_steps FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM training_plans
    WHERE training_plans.id = training_steps.plan_id
    AND training_plans.user_id = auth.uid()::text
  ));

CREATE POLICY "Users can update their training steps"
  ON training_steps FOR UPDATE
  USING (EXISTS (
    SELECT 1 FROM training_plans
    WHERE training_plans.id = training_steps.plan_id
    AND training_plans.user_id = auth.uid()::text
  ));

-- Training sessions policies
CREATE POLICY "Users can view their own training sessions"
  ON training_sessions FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM training_steps
    JOIN training_plans ON training_plans.id = training_steps.plan_id
    WHERE training_steps.id = training_sessions.step_id
    AND training_plans.user_id = auth.uid()::text
  ));

CREATE POLICY "Users can create training sessions"
  ON training_sessions FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

-- Chat history policies
CREATE POLICY "Users can view own chat history"
  ON chat_history FOR SELECT
 USING (user_id = auth.uid()::text);

CREATE POLICY "Users can create chat messages"
  ON chat_history FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');